// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3840.SteamWorks2017.subsystems;

import org.usfirst.frc3840.SteamWorks2017.RobotMap;
import org.usfirst.frc3840.SteamWorks2017.commands.*;
import com.ctre.CANTalon;

import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 *  FRC 2017 Steam works
 *  Team 3840
 */
public class DriveTrain extends Subsystem {

    //Drive for the acrade driving
    private final CANTalon leftMotor1 = RobotMap.driveTrainLeftMotor1;
    private final CANTalon leftMotor2 = RobotMap.driveTrainLeftMotor2;
    private final CANTalon rightMotor1 = RobotMap.driveTrainRightMotor1;
    private final CANTalon rightMotor2 = RobotMap.driveTrainRightMotor2;
    private final RobotDrive robotDrive = RobotMap.driveTrainRobotDrive;
    private final AnalogInput distanceToWall = RobotMap.distanceToWall;
        
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        
        // Set the default command for a subsystem here.
    	setDefaultCommand(new ArcadeDrive());
    }
    
  //Arcade Drive from Drive Xbox Controller Usb 0 input    
    public void arcadeDrive(XboxController driveXBoxController) {
    	double joyThreshold = 0.15;  //default threshold value from xBox Controller
    	double stickX = driveXBoxController.getX();       
    	double stickY = driveXBoxController.getY();
    	SmartDashboard.putNumber("Speed X: ", stickX);
    	SmartDashboard.putNumber("Speed Y: ", stickY);
    	//Checks for min joystick input
    	if(Math.abs(stickX) > joyThreshold|| Math.abs(stickY) > joyThreshold || true) { 
    		robotDrive.arcadeDrive(stickY, stickX, false);
    	}
    	this.motorStatus();
    }
    
  //Stop motion for acrcade drive
    public void driveStraight() {
    	robotDrive.arcadeDrive(0, 0,false);
    }
    
    //Autonomous Driving 
    public void AutonomousDrive(double speed) {  	
    	robotDrive.tankDrive(speed, speed);
    	this.motorStatus();
    }
    
    //Vision drive from network tables
    public void VisionDrive(){
    	
    }
    
   
    //Motor Status Displayed
    public void motorStatus() {
    	double distance = (distanceToWall.getAverageVoltage()/512);
    	
    	//Display current time on the smart dash board
    	SmartDashboard.putNumber("Motor1 Current: ", leftMotor1.getOutputCurrent());
    	SmartDashboard.putNumber("Motor2 Current: ", leftMotor2.getOutputCurrent());
    	SmartDashboard.putNumber("Motor3 Current: ", rightMotor1.getOutputCurrent());
    	SmartDashboard.putNumber("Motor4 Current: ", rightMotor2.getOutputCurrent());
    	SmartDashboard.putNumber("Motor1 Speed: ", leftMotor1.getOutputVoltage());
    	SmartDashboard.putNumber("Motor2 Speed: ", leftMotor2.getOutputVoltage());
    	SmartDashboard.putNumber("Motor3 Speed: ", rightMotor1.getOutputVoltage());
    	SmartDashboard.putNumber("Motor4 Speed: ", rightMotor2.getOutputVoltage());
    	SmartDashboard.putNumber("Distance: ", distance);
    }
          
}

